import os
import re
import argparse

input = '''
line1
          echo ::set-env name=FOO_BAR::$FOO_BAR
          echo ::set-env name=FOO_BAR::${FOO_BAR}
          echo "::set-env name=FOO_BAR::${FOO_BAR}"
          echo "::set-env name=FOO_BAR::$FOO_BAR"
line3
'''

should = '''
line1
          echo "FOO_BAR=$FOO_BAR" >> $GITHUB_ENV
          echo "FOO_BAR=$FOO_BAR" >> $GITHUB_ENV
          echo "FOO_BAR=$FOO_BAR" >> $GITHUB_ENV
          echo "FOO_BAR=$FOO_BAR" >> $GITHUB_ENV
line3
'''


def do_file(arg):
    if not arg.endswith('.sh'):
        #print('not a .sh file: %s' % arg)
        return
    old = open(arg, 'rt').read()
    new = fix_set_env()
    if new == old:
        return
    with open(arg, 'wt') as fd:
        fd.write(new)
    print('Updated %s' % arg)


def fix_set_env(input):
    def updater(match):
        match1, match2 = match.groups()
        name = match2.strip('{}"')
        if match1 != name:
            print(f'### unsure, {match1} != {name}')
            return match.group(0)
        ret = '"%s=$%s" >> $GITHUB_ENV' % (name, name)
        print('### Update: %s --> %s' % (match.group(0), ret))
        return ret

    return re.sub(r'"?::set-env\s+name=(\S+?)::\$([\S}"]+)', updater, input)


def test():
    result = fix_set_env(input)
    assert result == should, result
    print('OK')


def do_dir_or_file(arg):
    if os.path.isfile(arg):
        do_file(arg)
        return
    if not os.path.isdir(arg):
        return
    for root, dirs, files in os.walk(arg):
        dirs.sort()
        for file in files:
            file = os.path.join(root, file)
            do_dir_or_file(file)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()
    for arg in args.files:
        if not os.path.exists(arg):
            print('%s does not exist' % arg)
            continue
        do_dir_or_file(arg)


if __name__ == '__main__':
    main()